// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          Int      @id @default(autoincrement())
  image       String
  name        String
  description String
  price       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  orderItems OrderItem[]
  carts      Cart[]
}

model Cart {
  id        Int      @id @default(autoincrement())
  sessionId String
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Customer {
  id          Int      @id @default(autoincrement())
  name        String
  phoneNumber String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  orders Order[]
}

model Order {
  id            Int      @id @default(autoincrement())
  customerId    Int
  customer      Customer @relation(fields: [customerId], references: [id])
  transactionId String   @unique
  customerName  String
  totalAmount   Int
  status        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  orderItems OrderItem[]
  payments   Payment[]

  @@index([customerId])
  @@index([status])
}

model OrderItem {
  id           Int      @id @default(autoincrement())
  productId    Int
  product      Product  @relation(fields: [productId], references: [id])
  orderId      Int
  order        Order    @relation(fields: [orderId], references: [id])
  quantity     Int
  priceAtOrder Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([productId])
  @@index([orderId])
}

model Payment {
  id                    Int       @id @default(autoincrement())
  transactionId         String    @unique
  order                 Order     @relation(fields: [transactionId], references: [transactionId])
  midtransTransactionId String
  paymentType           String
  bank                  String?
  vaNumber              String?
  grossAmount           Int
  transactionStatus     String
  fraudStatus           String?
  transactionTime       DateTime?
  expiryTime            DateTime?
  createdAt             DateTime? @default(now())
  updatedAt             DateTime  @updatedAt
  rawResponse           Json?

  @@index([paymentType])
  @@index([transactionTime])
  @@index([transactionId])
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      String   @default("ADMIN")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
